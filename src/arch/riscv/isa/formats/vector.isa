// SPDX-FileCopyrightText: Copyright Â© 2022 by Rivos Inc.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0

// Copyright (c) 2022 The Regents of the University of California
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met: redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer;
// redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution;
// neither the name of the copyright holders nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// --- Start of VectorCfg

def template VectorCfgConstructor {{
    %(class_name)s::%(class_name)s(MachInst machInst, RiscvISA::VTYPE machVtype, uint32_t machVl, int vlen)
        : %(base_class)s("%(mnemonic)s", machInst, VectorCfgOpClass, machVtype, machVl, vlen)
    {
        %(set_reg_idx_arr)s;
        %(constructor)s;
        flags[IsVector] = true;
    }
}};

def template VectorConfigExecute {{
    Fault
    %(class_name)s::execute(ExecContext *xc,
        Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        RiscvISA::VTYPE new_vtype = 0xFFFFFFFF; // will have an illegal [30:8]

        %(op_decl)s;
        %(op_rd)s;

        if (fault == NoFault) {

            %(code)s;

            if (fault == NoFault) {
                %(op_wb)s;
            }
        }

        //NPC = NPC;
        RiscvISA::PCState newPCState;
        set(newPCState, xc->pcState());
        newPCState.vtype(new_vtype);
        newPCState.vl(Rd); // the new vl is returned in Rd
        xc->pcState(newPCState);

        xc->tcBase()->pcState(newPCState);

        return fault;
    }
}};

def format VectorCfgOp(execute_code, branch_target_code, *opt_flags) {{
    iop = InstObjParams(name, Name, 'VectorCfgOp', {'code': execute_code}, opt_flags)
    header_output = VectorCfgDeclare.subst(iop)
    decoder_output = VectorCfgConstructor.subst(iop)
    decode_block = VectorDecode.subst(iop)
    exec_output = VectorConfigExecute.subst(iop)
}};

// --- End of VectorCfg

// --- Start of OPIVI

def template VectorOPIVIMacroOpConstructor {{
    %(class_name)s::%(class_name)s(MachInst machInst, RiscvISA::VTYPE machVtype, uint32_t machVl, int vlen)
        : %(base_class)s("%(mnemonic)s", machInst, VectorOPIVIMacroClass, machVtype, machVl, vlen)
    {
        // Example:
        // vadd.vi        31..26=0x00 vm vs2 simm5 14..12=0x3 vd 6..0=0x57

        //_numVecSrcRegs = _numTypedDestRegs[VecRegClass] =
        //    ceil((float) machVl / (VecRegSizeBytes / sewb));
        //assert((VD % alignToPowerOfTwo(_numTypedDestRegs[VecRegClass])) == 0);
        //assert((VS2 % alignToPowerOfTwo(_numTypedDestRegs[VecRegClass])) == 0);

        auto sew = getSew(machVtype.vsew);
        uint32_t num_elements_per_reg = vlen / sew;
        uint32_t element_count = machVl;

        auto num_vregs = vlmulToNumRegs(machVtype.vlmul);

        for (uint32_t reg_id_offset = 0; reg_id_offset < num_vregs; reg_id_offset++)
        {
            StaticInstPtr uop = new %(class_name)sMicro(machInst, machVtype, machVl,
                VD+reg_id_offset, VS2+reg_id_offset, VM, reg_id_offset*num_elements_per_reg, num_elements_per_reg,
                (element_count < num_elements_per_reg) ? element_count : num_elements_per_reg,
                sew, (uint64_t)machVtype.vma, (uint64_t)machVtype.vta);
            element_count = (element_count >= num_elements_per_reg) ? (element_count - num_elements_per_reg) : 0;
            microops.push_back(std::move(uop));
        }

        microops.front()->setFlag(IsFirstMicroop);
        microops.back()->setFlag(IsLastMicroop);

        flags[IsVector] = true;
    }
}};

def template VectorOPIVIMicroOpConstructor {{
    %(class_name)s::%(class_name)sMicro::%(class_name)sMicro(MachInst machInst,
        RiscvISA::VTYPE machVtype, uint32_t machVl,
        uint64_t vdRegID, uint64_t vs2RegID,
        uint64_t vmRegID, uint64_t mask_offset,
        uint64_t num_elements_per_reg, uint64_t num_non_tail_elements,
        uint64_t sew, uint64_t mask_policy, uint64_t tail_policy)
        : %(base_class)s("%(mnemonic)s", machInst, VectorOPIVIMicroClass,
            vdRegID, vs2RegID, vmRegID, mask_offset,
            num_elements_per_reg, num_non_tail_elements,
            sew, mask_policy, tail_policy)
    {
        %(set_reg_idx_arr)s;

        // Example:
        // vadd.vv         31..26=0x00 vm vs2 vs1 14..12=0x0 vd 6..0=0x57
        // vreg[vdRegID] = vreg[vs1RegID] + vreg[vs2RegID]

        // Set register dependencies
        //setDestRegIdx(_numDestRegs++, RegId(VecRegClass, vdRegID));
        setDestRegIdx(_numDestRegs++, vecRegClass[vdRegID]);
        //setSrcRegIdx(_numSrcRegs++, RegId(VecRegClass, vs2RegID));
        setSrcRegIdx(_numSrcRegs++, vecRegClass[vs2RegID]);

        if (vmRegID == 0) { // The mask register is always v0
            // Masked instruction.
            //setSrcRegIdx(_numSrcRegs++, RegId(VecRegClass, 0));
            setSrcRegIdx(_numSrcRegs++, vecRegClass[0]);
        }

        //if (tail_policy == 0) // undisturbed
        if (num_non_tail_elements < num_elements_per_reg)
            //setSrcRegIdx(_numSrcRegs++, RegId(VecRegClass, vdRegID));
            setSrcRegIdx(_numSrcRegs++, vecRegClass[vdRegID]);

        _numVecSrcRegs = _numSrcRegs;

        flags[IsInteger] = true;
        flags[IsVector] = true;
        flags[IsMicroop] = true;
    }
}};

def template VectorOPIVIMicroExecute {{
    Fault
    %(class_name)s::%(class_name)sMicro::execute(ExecContext *xc,
        Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        //uint32_t vl = xc->readMiscReg(MISCREG_VL);
        //VTYPE vtype = xc->readMiscReg(MISCREG_VTYPE);
        //size_t sewb = getSew(vtype.vsew) / 8;

        if (VM == 0) {
             if (VD == 0 || VS2 == 0) {
                std::string error =
                    csprintf("Masked VectorOPIVI using v0 "
                             "as src/dst register\n");
                return std::make_shared<IllegalInstFault>(error, machInst);
             }
        }

        bool has_to_copy_tail_elements = num_non_tail_elements < num_elements_per_reg;

        auto empty_vmask = std::vector<uint8_t>((num_non_tail_elements + 7)/8, 0xFF);
        uint8_t* vmask = empty_vmask.data();
        // Figure out if we need masks
        if (vmRegID == 0) {
            RiscvISA::VecRegContainer Vmask_container;
            xc->getRegOperand(this, 2, &Vmask_container);
            vmask = Vmask_container.as<uint8_t>();
        }

        uint32_t tail_reg_idx = (vmRegID == 0) ? 2 : 1;
        RiscvISA::VecRegContainer old_Vd_container;
        if (has_to_copy_tail_elements)
            xc->getRegOperand(this, tail_reg_idx, &old_Vd_container);        

        bool utilize_mask = vmRegID == 0;

        auto &Vd_container = *(RiscvISA::VecRegContainer *)xc->getWritableRegOperand(this, 0);
        RiscvISA::VecRegContainer Vs2_container;
        xc->getRegOperand(this, 0, &Vs2_container);

        if (fault == NoFault) {
            if (sew == 8) {
                auto Vd = Vd_container.as<uint8_t>();
                auto Vs2 = Vs2_container.as<uint8_t>();
                for (size_t regElemID = 0; regElemID < num_elements_per_reg; ++regElemID) {
                    uint32_t maskElemID = mask_offset + regElemID;
                    if (utilize_mask && (bits(vmask[maskElemID / 8], maskElemID % 8, maskElemID % 8) == 0)) {  // "mask undisturbed" policy
                        continue;
                    }
                    %(code)s;
                }
                if (has_to_copy_tail_elements)
                {
                    auto old_Vd = old_Vd_container.as<uint8_t>();
                    for (uint32_t regElemID = num_non_tail_elements; regElemID < num_elements_per_reg; ++regElemID) {
                        Vd[regElemID] = old_Vd[regElemID];
                    }
                }
            } else if (sew == 16) {
                auto Vd = Vd_container.as<uint16_t>();
                auto Vs2 = Vs2_container.as<uint16_t>();
                for (size_t regElemID = 0; regElemID < num_elements_per_reg; ++regElemID) {
                    uint32_t maskElemID = mask_offset + regElemID;
                    if (utilize_mask && (bits(vmask[maskElemID / 8], maskElemID % 8, maskElemID % 8) == 0)) {  // "mask undisturbed" policy
                        continue;
                    }
                    %(code)s;
                }
                if (has_to_copy_tail_elements)
                {
                    auto old_Vd = old_Vd_container.as<uint16_t>();
                    for (uint32_t regElemID = num_non_tail_elements; regElemID < num_elements_per_reg; ++regElemID) {
                        Vd[regElemID] = old_Vd[regElemID];
                    }
                }
            } else if (sew == 32) {
                auto Vd = Vd_container.as<uint32_t>();
                auto Vs2 = Vs2_container.as<uint32_t>();
                for (size_t regElemID = 0; regElemID < num_elements_per_reg; ++regElemID) {
                    uint32_t maskElemID = mask_offset + regElemID;
                    if (utilize_mask && (bits(vmask[maskElemID / 8], maskElemID % 8, maskElemID % 8) == 0)) {  // "mask undisturbed" policy
                        continue;
                    }
                    %(code)s;
                }
                if (has_to_copy_tail_elements)
                {
                    auto old_Vd = old_Vd_container.as<uint32_t>();
                    for (uint32_t regElemID = num_non_tail_elements; regElemID < num_elements_per_reg; ++regElemID) {
                        Vd[regElemID] = old_Vd[regElemID];
                    }
                }
            } else if (sew == 64) {
                auto Vd = Vd_container.as<uint64_t>();
                auto Vs2 = Vs2_container.as<uint64_t>();
                for (size_t regElemID = 0; regElemID < num_elements_per_reg; ++regElemID) {
                    uint32_t maskElemID = mask_offset + regElemID;
                    if (utilize_mask && (bits(vmask[maskElemID / 8], maskElemID % 8, maskElemID % 8) == 0)) {  // "mask undisturbed" policy
                        continue;
                    }
                    %(code)s;
                }
                if (has_to_copy_tail_elements)
                {
                    auto old_Vd = old_Vd_container.as<uint64_t>();
                    for (uint32_t regElemID = num_non_tail_elements; regElemID < num_elements_per_reg; ++regElemID) {
                        Vd[regElemID] = old_Vd[regElemID];
                    }
                }
            } else {
                std::string error = csprintf(
                    "Illegal vsewb value in VTYPE: 0x%x\n", sew);
                fault = std::make_shared<IllegalInstFault>(error, machInst);
            }
            if (fault == NoFault) {
                if (traceData) {
                    traceData->setData(vecRegClass, &Vd_container);
                }
            }
        }

        return fault;
    }
}};

def template VectorOPIVIMicroDeclare {{
    //
    // Static instruction class for "%(mnemonic)s".
    //
    class %(class_name)s::%(class_name)sMicro : public %(base_class)s
    {
      private:
        // Example:
        // vadd.vi        31..26=0x00 vm vs2 simm5 14..12=0x3 vd 6..0=0x57
        // Sources: up to 1 vector regs starting at Vs2 and
        //          1 mask register and
        //          1 destination register.
        RegId srcRegIdxArr[1 + 1 + 1];
        // Destinations: up to 8 vector regs starting at Vd
        RegId destRegIdxArr[1];

      public:
        /// Constructor.
        %(class_name)sMicro(MachInst machInst,
        RiscvISA::VTYPE machVtype, uint32_t machVl,
        uint64_t vdRegID, uint64_t vs2RegID,
        uint64_t vmRegID, uint64_t mask_offset,
        uint64_t num_elements_per_reg, uint64_t num_non_tail_elements,
        uint64_t sew, uint64_t mask_policy, uint64_t tail_policy);
        Fault execute(ExecContext *, Trace::InstRecord *) const override;
        using %(base_class)s::generateDisassembly;
    };
}};

def format VectorOPIVIMacroOp(code, *opt_flags) {{
    macro_iop = InstObjParams(name, Name, 'VectorOPIVIMacroOp', code, opt_flags)
    header_output = VectorMacroDeclare.subst(macro_iop)
    decoder_output = VectorOPIVIMacroOpConstructor.subst(macro_iop)
    decode_block = VectorMacroDecode.subst(macro_iop)
    exec_output = VectorMacroExecute.subst(macro_iop)


    uop_iop = InstObjParams(name, Name, 'VectorOPIVIMicroOp', code, opt_flags)
    header_output += VectorOPIVIMicroDeclare.subst(uop_iop)
    decoder_output += VectorOPIVIMicroOpConstructor.subst(uop_iop)
    decode_block += VectorMicroDecode.subst(uop_iop)
    exec_output += VectorOPIVIMicroExecute.subst(uop_iop)
}};

// --- End of OPIVI

// Others
def template VectorDecode {{
    return new %(class_name)s(machInst, machVtype, machVl, vlen);
}};

def template VectorMicroDecode {{
    return new %(class_name)s(machInst, machVtype, machVl, vlen);
}};


def template VectorDeclare {{
    //
    // Static instruction class for "%(mnemonic)s".
    //
    class %(class_name)s : public %(base_class)s
    {
      private:
        %(reg_idx_arr_decl)s;

      public:
        /// Constructor.
        %(class_name)s(MachInst machInst, RiscvISA::VTYPE vtype, uint32_t vl, int vlen);
        Fault execute(ExecContext *, Trace::InstRecord *) const override;
        using %(base_class)s::generateDisassembly;
    };
}};

def template VectorMacroDecode {{
    return new %(class_name)s(machInst, machVtype, machVl, vlen);
}};

def template VectorMacroDeclare {{
    //
    // Static instruction class for "%(mnemonic)s".
    //
    class %(class_name)s : public %(base_class)s
    {
      public:
        /// Constructor.
        %(class_name)s(MachInst machInst, RiscvISA::VTYPE vtype, uint32_t vl, int vlen);
        Fault execute(ExecContext *, Trace::InstRecord *) const override;
        using %(base_class)s::generateDisassembly;

      protected:
        class %(class_name)sMicro;
    };
}};

def template VectorMacroExecute {{
    Fault
    %(class_name)s::execute(ExecContext *xc,
        Trace::InstRecord *traceData) const
    {
        std::string error = csprintf("Executing Macro Inst\n");
        return std::make_shared<IllegalInstFault>(error, machInst);
    }
}};

def template VectorCfgDeclare {{
    class %(class_name)s : public %(base_class)s
    {
      private:
        %(reg_idx_arr_decl)s;

      public:
        /// Constructor.
        %(class_name)s(MachInst machInst, RiscvISA::VTYPE vtype, uint32_t vl, int vlen);
        Fault execute(ExecContext *, Trace::InstRecord *) const override;
        using %(base_class)s::generateDisassembly;
    };
}};